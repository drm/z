# Version Control System settings
vcs:
    # The SVN url to the project. Currently, only SVN is supported
    url:            ~

    # The path to the version to use
    version:        trunk@HEAD

    export:
        # The revision info file to write when exporting
        revfile:    .z.rev

# Synchronization options
sync:
    # Command line options to rsync
    options:        "-rupvc --delete"

    # File containing exclusion rules for rsync
    exclude_file:   "rsync.exclude"

# Build options
build:
    # Directory to build in
    dir:            ./build

# Content options
content:
    # Dirs that contain user content (i.e. uploaded files and such)
    dir:            [ 'web/media' ]

# Quality Assurance options
qa:
    # PHPCS options
    phpcs:
        # Command line options to the PHPCS tool
        options:    "--report=summary --report-width=200"

        # The standard to use
        standard:   "Zicht"

        # Directories that are used
        dir:        [ 'src', 'tests' ]

    # JSHint options
    jshint:
        # Command line to use for running jshint
        run:        "rhino /opt/jshint/jshint-rhino.js"

        # Files to check
        files:      ""

# Environments
env: ~

# Available default tasks. All tasks prefixed with '_' are considered 'private',
# i.e. they are not published in the command line help / list commands.
tasks:
    # Clean the build
    _clean:         rm -rf $(build.dir)

    # Export the specified version to the build dir
    _export:
        do:
            - svn export $(vcs.url)/$(vcs.version) $(build.dir)
            - svn info $(vcs.url)/$(vcs.version) > $(build.dir)/$(vcs.export.revfile)
        yield:      build.dir

    # Synchronize the build dir to the remote environment
    _sync:          rsync --exclude-from=$(tasks.build)/$(sync.exclude_file) $(sync.options) $(tasks.build)/ $(env.ssh):$(env.root)

    # Synchronize the build dir to the remote environment, dry run
    _sync.simulate: rsync --exclude-from=$(tasks.build)/$(sync.exclude_file) $(sync.options) $(tasks.build)/ $(env.ssh):$(env.root) --dry-run

    # Clear remote APC cache by transferring a file, and wgetting it.
    clear_apc_cache:
        set:
            _file: $(env.root)$(env.web)/__apc_clear_cache.php
        do:
            - echo '<?php apc_clear_cache("user"); apc_clear_cache(); ' | ssh $(env.ssh) "cat > $(_file)"
            - wget -qO - $(env.url)/__apc_clear_cache.php > /dev/null
            - ssh $(env.ssh) "rm $(_file)"

    # Creates a build
    build:
        pre: [ @_clean, @_export ]
        do:
            - if [ -d "vendor/" ];                      then rsync -rp vendor/ $(build.dir)/vendor; fi;
            - if [ -f "$(build.dir)/composer.lock" ];   then cd $(build.dir) && composer install --no-scripts; fi;
            - if [ -f "$(build.dir)/app/console" ];     then cd $(build.dir) && php app/console assets:install --env=$(env) --no-debug; fi;
            - if [ -f "$(build.dir)/app/console" ];     then cd $(build.dir) && php app/console assetic:dump --env=$(env) --no-debug; fi;
            - |
                if [ -f "$(build.dir)/Makefile" ] && (grep 'sass:' Makefile > /dev/null); then
                    cd $(build.dir) && make sass;
                fi;
        yield: build.dir

    # Deploys a build
    deploy:
        set:
            tag: $(env)_$(now)
        pre:    @_sync
        post:   @tag
        do:     ssh $(env.ssh) "cd $(env.root) && php app/console cache:clear --env=$(env) --no-debug"

    # Simulates a deploy
    simulate: @_sync.simulate

    # Connect to the remote shell using ssh
    ssh:        ssh -t $(env.ssh) "cd $(env.root); bash;"

    # Connect to the remote mysql shell using ssh
    mysql:      ssh -t $(env.ssh) "mysql $(env.db)"

    # Initialize the SSH session by copying a local public key to the remote machine
    ssh.init:   ssh-copy-id $(env.ssh)

    # Do jshint quality check
    qa.jshint:  for f in $(qa.jshint.files); do $(qa.jshint.run) $f; done;

    # Do phpcs quality check
    qa.phpcs:   phpcs --extensions=php --standard=$(qa.phpcs.standard) $(qa.phpcs.dir) $(qa.phpcs.options)

    # Do phpunit quality check
    qa.phpunit: phpunit

    # Do all quality checks
    qa:
        do:     [ @qa.jshint, @qa.phpcs, @qa.phpunit]

    # Backup remote content into a content archive containing all files from the $(content.dirs) variable
    # and a dump of the database
    content.backup:
        set:
            _backup.file:   $(env).$(now).tar.gz
            _backup.cmd:    |
                cd $(env.root);
                mysqldump -Q --opt $(env.db) > db.sql;
                tar zcvf $(_backup.file) $(content.dir) db.sql;
                rm db.sql
        do:
            - ssh $(env.ssh) "$(_backup.cmd)"
            - rsync --progress $(env.ssh):$(env.root)$(_backup.file) ./$(_backup.file)

        yield: _backup.file

    # Pull a content archive into the local installation
    content.pull:
        set:
            file: $(tasks.content.backup)
        do:
            - @content.load
            - rm $(file)

    # Load a content archive
    content.load:
        set:
            file: ?
        do: |
            cd $(env.local.root);
            tar zxvf $(file);
            mysql $(env.local.db) < db.sql
            rm db.sql

    content.push:
        set:
            file: ?
        pre:
            - @content.backup
        do: |
            rsync --progress $(file) $(env.ssh):$(env.root)/$(file)
            ssh $(env.ssh) "cd $(env.root) && tar zxvf $(file) && mysql $(env.db) < db.sql;"
            ssh $(env.ssh) "rm $(env.root)/$(file)"

    # Create a version branch
    branch:
        set:
            branch:     ?
            _tgt:       $(vcs.url)/branches/$(branch)
            _src:       ? $(vcs.url)/$(vcs.version)
        do:
            - svn cp $(_src) $(_tgt)
        post:
            - @switch

    # Switch to a branch
    switch:
        set:
            branch:     ?
            _tgt:       $(vcs.url)/branches/$(branch)
        do:
            - svn switch $(_tgt)

    # Create a version tag
    tag:
        set:
            tag:        ?
            _tgt:       $(vcs.url)/tags/$(tag)
            _src:       ? $(vcs.url)/$(vcs.version)

        do:
            - svn cp $(_src) $(_tgt)

    # List all versions
    versions:
        do:
            - svn ls $(vcs.url)/tags     | awk '{print "tags/" $1}'
            - svn ls $(vcs.url)/branches | awk '{print "branches/" $1}'

    # Diff to specific version
    diff:
        set:
            version:   ?
        do:
            - svn diff --summarize $(vcs.url)/$(version) $(vcs.url)/$(vcs.version)

    # Show the deployed version of the remote machine
    version: ssh $(env.ssh) "cat $(env.root)/$(vcs.export.revfile)"
