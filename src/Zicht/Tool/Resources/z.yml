vcs:
    url:            ~
    version:        trunk@HEAD

sync:
    options:        "-rupv --size-only --delete"
    exclude_file:   "rsync.exclude"

build:
    dir:            ./build

content:
    dir:            [ 'web/media' ]

env: ~

tasks:
    _clean:         rm -rf $(build.dir)

    _export:
        do:         svn export $(vcs.url)/$(vcs.version) $(build.dir)
        yield:      build.dir

    _sync:          rsync --exclude-from=$(tasks.build)/$(sync.exclude_file) $(sync.options) $(tasks.build)/ $(env.ssh):$(env.root)
    _sync.simulate: rsync --exclude-from=$(tasks.build)/$(sync.exclude_file) $(sync.options) $(tasks.build)/ $(env.ssh):$(env.root) --dry-run

    clear_apc_cache:
        set:
            _file: $(env.root)$(env.web)/__apc_clear_cache.php
        do:
            - echo '<?php apc_clear_cache("user"); apc_clear_cache(); ' | ssh $(env.ssh) "cat > $(_file)"
            - wget -qO - $(env.url)/__apc_clear_cache.php > /dev/null
            - ssh $(env.ssh) "rm $(_file)"

    build:
        pre: [ @_clean, @_export ]
        do:
            - if [ -d "vendor/" ]; then rsync -rp vendor/ $(build.dir)/vendor; fi;
            - if [ -f "$(build.dir)/composer.lock" ]; then cd $(build.dir) && composer install --no-scripts; fi;
            - cd $(build.dir) && php app/console assets:install --env=$(env) --no-debug;
            - cd $(build.dir) && php app/console assetic:dump --env=$(env) --no-debug;
            - cd $(build.dir) && make sass;
        yield: build.dir

    deploy:
        pre: @_sync
        do:
            - ssh $(env.ssh) "cd $(env.root) && php app/console cache:clear --env=$(env) --no-debug"

    simulate: @_sync.simulate

    ssh:        ssh -t $(env.ssh) "cd $(env.root); bash;"
    mysql:      ssh -t $(env.ssh) "mysql $(env.db)"
    ssh.init:   ssh-copy-id $(env.ssh)

    content.backup:
        set:
            _backup.file:   $(env).$(now).tar.gz
            _backup.cmd:    |
                cd $(env.root);
                mysqldump -Q --opt $(env.db) > db.sql;
                tar zcvf $(_backup.file) $(content.dir) db.sql;
                rm db.sql
        do:
            - ssh $(env.ssh) "$(_backup.cmd)"
            - rsync --progress $(env.ssh):$(env.root)$(_backup.file) ./$(_backup.file)

        yield: _backup.file

    content.load:
        set:
            file: ~
        do:
            - cd $(env.local.root)
            - tar zxvf $(file);
            - mysql $(env.local.db) < db.sql



#
#    static function uses() {
#        return array(
#            'backup.input',
#            'environment'
#        );
#    }
#
#
#    function execute()
#    {
#        $this->context->execScript('rsync --progress $(backup.input) $(ssh):$(root)$(backup.input)');
#        $this->context->execScript('ssh $(ssh) "cd $(root) && tar zxvf $(backup.input)"');
#        $this->context->execScript('ssh $(ssh) "mysql $(db) < db.sql"');
#    }
#
#
#    function simulate()
#    {
#        $this->context->writeln('rsync --progress $(backup.input) $(ssh):$(root)$(backup.input)');
#        $this->context->writeln('ssh $(ssh) "cd $(root) && tar zxvf $(backup.input)"');
#        $this->context->writeln('ssh $(ssh) "mysql $(db) < db.sql"');
#    }
#
#
#    function getRemoteCommand()
#    {
#        return 'cd $(root); mysqldump -Q --opt $(db) > db.sql; tar zcvf $(backup.input) $(content.dir) db.sql; rm db.sql';
#    }
#}